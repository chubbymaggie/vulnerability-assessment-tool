apiVersion: v1
kind: ConfigMap

metadata:
  name: {{ template "postgres.script.configMapName" . }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "commonLabels" . | nindent 4 }}

data:
  01-postgres-users-setup.sh: |
    #!/bin/bash
    CHART_NAME="{{ template "postgres.master.name" . }}"
    LOG_ORIGIN="01-postgres-users-setup.sh"
    {{- include "logFunctions" . | nindent 4}}

    if [[ -z $POSTGRES_USER ]]; then
      _error "POSTGRES_USER cannot be empty"
    fi

    if [[ -z $POSTGRES_PASSWORD ]]; then
      _error "POSTGRES_PASSWORD cannot be empty"
    fi

    _info "INFO: Creating roles for pgpool and replicas"
    psql -v ON_ERROR_STOP=1 <<-EOSQL
      CREATE ROLE $REPLICATION_USER WITH REPLICATION ENCRYPTED PASSWORD '${POSTGRES_PASSWORD}' LOGIN;
      CREATE ROLE $PGPOOL_USER WITH LOGIN ENCRYPTED PASSWORD '${PGPOOL_PASSWORD}';
      ALTER ROLE $PGPOOL_USER WITH SUPERUSER;
      ALTER ROLE $POSTGRES_USER WITH LOGIN ENCRYPTED PASSWORD '${POSTGRES_PASSWORD}';
    EOSQL

  02-postgres-storage-setup.sh: |
    #!/bin/bash
    CHART_NAME="{{ template "postgres.master.name" . }}"
    LOG_ORIGIN="02-postgres-storage-setup.sh"
    {{- include "logFunctions" . | nindent 4}}

    _info "Creating default schemas for database"
    psql -v ON_ERROR_STOP=1 <<-EOSQL
    CREATE TABLE schema_version (
      installed_rank INTEGER NOT NULL,
      version CHARACTER VARYING(60),
      description CHARACTER VARYING(200) NOT NULL,
      type CHARACTER VARYING(20) NOT NULL,
      script CHARACTER VARYING(1000) NOT NULL,
      checksum INTEGER,
      installed_by CHARACTER VARYING(100) NOT NULL,
      installed_on TIMESTAMP WITHOUT TIME ZONE DEFAULT now() NOT NULL,
      execution_time INTEGER NOT NULL,
      success BOOLEAN NOT NULL
    );
    ALTER TABLE schema_version OWNER TO ${POSTGRES_USER};
    INSERT INTO schema_version VALUES(
      1,
      '20161206.1800',
      'Base version',
      'BASELINE',
      'Base version',
      NULL,
      'postgres',
      '2016-12-06 18:00:00.000000',
      0,
      true
    );
    EOSQL

  replica-init.sh: |-
    #!/bin/sh
    CHART_NAME="{{ template "postgres.slave.name" . }}"
    LOG_ORIGIN="replica-init.sh"
    {{- include "logFunctions" . | nindent 4}}

    {{- $release := .Release.Name }}
    until pg_isready -h {{ $release }}-db-master -p 5432; do
      _info "Postgres-master not ready, sleeping for {{ .Values.postgres.slave.backoffDuration }}"
      sleep {{ .Values.postgres.slave.backoffDuration }}
    done
    _info "Postgres master is ready"

    _info "Running pg_basebackup to catch up replication server...";
    pg_basebackup -R -h {{ $release }}-db-master -D $PGDATA -U $REPLICATION_USER
    _info "Fixing permissions for PGDATA"
    chown -R postgres:postgres $PGDATA

  master-poststart-hook.sh: |-
    #!/bin/sh
    CHART_NAME="{{ template "postgres.slave.name" . }}"
    LOG_ORIGIN="replica-init.sh"
    {{- include "logFunctions" . | nindent 4}}

    _info "Creating archive dir"
    mkdir -p {{ .Values.postgres.master.pvcMountPath }}/archive

    _info "Fixing permissions archive dir"
    chown -R postgres:postgres {{ .Values.postgres.master.pvcMountPath }}
    chown postgres:postgres {{ .Values.postgres.master.pvcMountPath }}/archive

  master-prestop-hook.sh: |-
    #!/bin/sh
    CHART_NAME="{{ template "postgres.slave.name" . }}"
    LOG_ORIGIN="replica-init.sh"
    {{- include "logFunctions" . | nindent 4}}

    _log "Gracefully shutting down the postgres replica instance"
    pg_ctl stop -m fast
