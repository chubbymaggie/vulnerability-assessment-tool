apiVersion: v1
kind: ConfigMap

metadata:
  name: {{ template "mountedConfigMapName" . }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "commonLabels" . | nindent 4 }}

data:
  postgres-checker.sh: |-
    #!/bin/sh
    CHART_NAME="{{ template "name" . }}"
    LOG_ORIGIN="postgres-checker.sh"
    {{- include "logFunctions" . | nindent 4 }}

    {{- $release := .Release.Name }}
    until pg_isready -q -h {{ $release }}-db-master -p 5432; do
      _info "Postgres-master not ready, sleeping for {{ .Values.backoffDuration }}"
      sleep {{ .Values.backoffDuration }}
    done
    _info "Postgres master is ready"

    until pg_isready -q -h {{ $release }}-db-pool -p 5432; do
      _info "Pgpool entrypoint not ready, sleeping for {{ .Values.backoffDuration }}"
      sleep {{ .Values.backoffDuration }}
    done
    _info "Pgpool is ready"
    exit 0

  replica-checker.sh: |-
    #!/bin/sh
    {{- if .Values.rbac.create }}
    CHART_NAME="{{ template "name" . }}"
    LOG_ORIGIN="restbackend-checker.sh"
    {{- include "logFunctions" . | nindent 4 }}

    KUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    RESPONSE=false
    {{- with .Values.global }}
    {{- $replica := (mul .masterReplicas .replicationFactor) | default .slaveReplicas }}
    until $RESPONSE; do
      READY_REPLICAS=$(curl -sSk -H "Authorization: Bearer $KUBE_TOKEN" https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/{{ .namespace }}/endpoints/{{ $release }}-db-slave | jq '.subsets[].addresses | length ')
      _info "Found ${READY_REPLICAS} postgres replicas ready"
      if [ $READY_REPLICAS -ge {{ $replica }} ]; then
        _info "All replica nodes are ready"
        exit 0
      fi
    {{- end }}
      _info "Replication nodes are not ready, sleeping for {{ .Values.backoffDuration }}"
      sleep {{ .Values.backoffDuration }}
    done
    {{- else }}
    _info "Sleeping 120s to ensure that replication is set up"
    sleep 120
    {{- end }}
    exit 0
