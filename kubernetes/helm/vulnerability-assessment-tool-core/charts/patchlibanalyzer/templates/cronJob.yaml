{{- if not .Values.deployment.enabled }}
# INFO: cronjob enabled because .Values.deployment.enabled=false
apiVersion: batch/v1beta1
kind: CronJob

metadata:
  name: {{ template "cronJobName" . }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "commonLabels" . | nindent 4 }}

spec:
  {{- if .Values.cronJob.period }}
  # INFO: user defined cronjob period
  schedule: "* */{{ .Values.cronJob.period }} * * *"
  {{- else }}
  # INFO: default cronjob period
  schedule: "* */23 * * *"
  {{- end }}
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 600

  jobTemplate:
    metadata:
      annotations:
        checksum/patchlibanalyzer-env-config: {{ include (print .Template.BasePath "/envConfigMap.yaml") . | sha256sum | trunc 63 }}
        checksum/patchlibanalyzer-mounted-config: {{ include (print .Template.BasePath "/mountedConfigMap.yaml") . | sha256sum | trunc 63 }}
        checksum/patchlibanalyzer-secret: {{ include (print .Template.BasePath "/secret.yaml") . | sha256sum | trunc 63 }}

    spec:
      ttlSecondsAfterFinished: 60
      backoffLimit: 6
      parallelism: 1

      template:
        spec:
          initContainers:
          - name: {{ template "name" . }}-postgres-checker-container
            image: {{ template "containerName" .Values.image.initContainer }}
            imagePullPolicy: {{ .Values.image.initContainer.pullPolicy }}
            command:
            - sh
            - -c
            - . /vulas/postgres-checker.sh

            volumeMounts:
            - name: {{ template "mountedConfigMapName" . }}
              mountPath: /vulas/postgres-checker.sh
              subPath: postgres-checker.sh

            envFrom:
              - configMapRef:
                  name: {{ template "envConfigMapName" . }}
              - secretRef:
                  name: {{ template "secretName" . }}
            {{- if .Values.image.initContainer.resources }}
            resources:
              {{- toYaml .Values.image.initContainer.resources | nindent 14 }}
            {{- end }}
            {{- if .Values.image.initContainer.securityContext }}
            securityContext:
              {{- toYaml .Values.image.initContainer.securityContext | nindent 14 }}
            {{- end }}
          - name: {{ template "name" . }}-restbackend-checker-container
            image: everpeace/curl-jq:latest
            imagePullPolicy: "IfNotPresent"
            command:
            - sh
            - -c
            - . /vulas/restbackend-checker.sh

            volumeMounts:
            - name: {{ template "mountedConfigMapName" . }}
              mountPath: /vulas/restbackend-checker.sh
              subPath: restbackend-checker.sh
            {{- if .Values.image.initContainer.resources }}
            resources:
              {{- toYaml .Values.image.initContainer.resources | nindent 14 }}
            {{- end }}
            {{- if .Values.image.initContainer.securityContext }}
            securityContext:
              {{- toYaml .Values.image.initContainer.securityContext | nindent 14 }}
            {{- end }}
          {{- if .Values.persistentVolume }}
          - name: {{ template "name" . }}-permission-fix-container
            image: {{ template "containerName" .Values.image.initContainer }}
            imagePullPolicy: {{ .Values.image.initContainer.pullPolicy }}
            command:
            - sh
            - -c
            - chown -R {{ .Values.image.mainContainer.securityContext.runAsUser }}:{{ .Values.image.mainContainer.securityContext.runAsGroup }} {{ .Values.persistentVolume.mountPath }}

            volumeMounts:
            - name: {{ template "pvcName" . }}
              mountPath: {{ .Values.persistentVolume.mountPath }}
            securityContext:
              runAsUser: 0
          {{- end }}
          containers:
          - name: {{ template "name" . }}-container
            image: {{ template "containerName" .Values.image.mainContainer }}
            imagePullPolicy: {{ .Values.image.mainContainer.pullPolicy }}
            ports:
              - name: cia
                containerPort: 8080

            envFrom:
              - configMapRef:
                  name: {{ template "envConfigMapName" . }}
              - secretRef:
                  name: {{ template "secretName" . }}

            {{- if .Values.persistentVolume }}
            volumeMounts:
            - name: {{ template "pvcName" . }}
              mountPath: {{ .Values.persistentVolume.mountPath }}
            {{- end }}
            {{- if .Values.image.mainContainer.securityContext }}
            securityContext:
              {{- toYaml .Values.image.mainContainer.securityContext | nindent 14 }}
            {{- end }}
            {{ if .Values.image.mainContainer.resources -}}
            resources:
              {{- toYaml .Values.image.mainContainer.resources | nindent 14 }}
            {{- end }}

          restartPolicy: OnFailure
          volumes:
          {{- if .Values.persistentVolume }}
            - name: {{ template "pvcName" . }}
              persistentVolumeClaim:
                claimName: {{ template "pvcName" . }}
          {{- end }}
            - name: {{ template "mountedConfigMapName" . }}
              configMap:
                name: {{ template "mountedConfigMapName" . }}
                defaultMode: 0744
{{- else }}
# INFO: cronjob disabled because .Values.deployment.enabled=true
{{- end -}}
