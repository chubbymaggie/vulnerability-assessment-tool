{{- if .Values.kibana.enabled -}}
apiVersion: apps/v1
kind: Deployment

metadata:
  name: {{ include "kibana.deploymentName" . }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "commonLabels" . | nindent 4 }}

spec:
  replicas: {{ .Values.kibana.replicas }}
  revisionHistoryLimit: 5

  strategy:
    rollingUpdate:
      maxUnavailable: 1

  selector:
    matchLabels:
      {{- include "kibana.enrichedLabels" . | nindent 6 }}

  template:
    metadata:
      labels:
        {{- include "kibana.enrichedLabels" . | nindent 8 }}
      annotations:
        checksum/kibana-config: {{ include (print .Template.BasePath "/kibana/configMap.yaml") . | sha256sum | trunc 63 }}

    spec:
      {{- if .Values.kibana.securityContext }}
      {{- if .Values.kibana.securityContext.enabled }}
      securityContext:
        runAsUser: {{ .Values.kibana.securityContext.runAsUser }}
      {{- end }}
      {{- end }}
      serviceAccount: {{ include "kibana.serviceAccountName" . | quote }}
      automountServiceAccountToken: false
      {{- if or .Values.kibana.selfAntiAffinity .Values.kibana.elasticsearchAffinity }}
      affinity:
        {{- if .Values.kibana.selfAntiAffinity }}
        podAntiAffinity:
          {{- if .Values.kibana.selfAntiAffinity.soft }}
          preferredDuringSchedulingIgnoredDuringExecution:
          {{- else }}
          requiredDuringSchedulingIgnoredDuringExecution:
          {{ end }}
          - weight: {{ .Values.kibana.selfAntiAffinity.weight }}
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values: [{{ template "kibana.name" . }}]
                - key: {{ .Values.global.projectName }}/release-name
                  operator: In
                  values: [{{ .Release.Name }}]
              topologyKey: "kubernetes.io/hostname"
        {{- end }}
        {{- if .Values.kibana.elasticsearchAffinity }}
        podAffinity:
          {{- if .Values.kibana.elasticsearchAffinity.soft }}
          preferredDuringSchedulingIgnoredDuringExecution:
          {{- else }}
          requiredDuringSchedulingIgnoredDuringExecution:
          {{ end }}
          - weight: {{ .Values.kibana.elasticsearchAffinity.weight }}
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values: [{{ template "elastic.name" . }}]
                - key: {{ .Values.global.projectName }}/release-name
                  operator: In
                  values: [{{ .Release.Name }}]
              topologyKey: "kubernetes.io/hostname"
        {{- end }}
      {{- end }}

      {{- if .Values.kibana.plugins.enabled }}
      initContainers:
      - name: {{ template "kibana.name" . }}-plugin-container
        image: {{ template "containerName" .Values.kibana.image }}
        imagePullPolicy: {{ .Values.kibana.image.pullPolicy }}
        command:
        - /bin/bash
        - "-c"
        - |
          set -e
          rm -rf plugins/lost+found
          plugins=(
          {{- range .Values.kibana.plugins.values }}
          {{ . }}
          {{- end }}
          )
          if {{ .Values.kibana.plugins.reset }}
          then
            for p in $(./bin/kibana-plugin list | cut -d "@" -f1)
            do
              ./bin/kibana-plugin remove ${p}
            done
          fi
          for i in "${plugins[@]}"
          do
            IFS=',' read -ra PLUGIN <<< "$i"
            pluginInstalledCheck=$(./bin/kibana-plugin list | grep "${PLUGIN[0]}" | cut -d '@' -f1 || true)
            pluginVersionCheck=$(./bin/kibana-plugin list | grep "${PLUGIN[0]}" | cut -d '@' -f2 || true)
            if [ "${pluginInstalledCheck}" = "${PLUGIN[0]}" ]
            then
              if [ "${pluginVersionCheck}" != "${PLUGIN[1]}" ]
              then
                ./bin/kibana-plugin remove "${PLUGIN[0]}"
                ./bin/kibana-plugin install "${PLUGIN[2]}"
              fi
            else
              ./bin/kibana-plugin install "${PLUGIN[2]}"
            fi
          done
        ports:
        - name: kibana
          containerPort: 5601

        envFrom:
        - configMapRef:
            name: {{ include "kibana.configMapName" . }}

        volumeMounts:
        - name: {{ include "kibana.pvcName" . }}
          mountPath: /usr/share/kibana/plugins
        {{- if .Values.kibana.securityContext }}
        {{- if .Values.kibana.securityContext.enabled }}
        securityContext:
          allowPrivilegeEscalation: {{ .Values.kibana.securityContext.allowPrivilegeEscalation }}
        {{- end }}
        {{- end }}
      {{- end }}
      containers:
      - name: {{ include "kibana.name" . }}-container
        image: {{ include "containerName" .Values.kibana.image }}
        imagePullPolicy: {{ .Values.kibana.image.pullPolicy }}
        ports:
        - name: kibana
          containerPort: 5601

        envFrom:
        - configMapRef:
            name: {{ include "kibana.configMapName" . }}
        {{- $rootContext := .Values.global }}
        {{- if and .Values.kibana.readinessProbe .Values.kibana.readinessProbe.enabled }}
        {{- with .Values.kibana.readinessProbe }}
        readinessProbe:
          failureThreshold: {{ .failureThreshold }}
          initialDelaySeconds: {{ .initialDelaySeconds }}
          periodSeconds: {{ .periodSeconds }}
          timeoutSeconds: {{ .timeoutSeconds }}
          exec:
            command:
              - sh
              - -c
              - |
                #!/usr/bin/env bash -e
                http () {
                    local path="${1}"
                    set -- -XGET -s --fail
                    if [ -n "${ELASTICSEARCH_USERNAME}" ] && [ -n "${ELASTICSEARCH_PASSWORD}" ]; then
                      set -- "$@" -u "${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}"
                    fi
                    STATUS=$(curl -L --output /dev/null --write-out "%{http_code}" -k "$@" "http://localhost:5601${path}")
                    if [[ "${STATUS}" -eq 200 ]]; then
                      exit 0
                    fi
                    echo "Error: Got HTTP code ${STATUS} but expected a 200"
                    exit 1
                }
                http "{{ $rootContext.subPath }}/monitoring/kibana"
        {{- end }}
        {{- end }}
        resources:
          {{- toYaml .Values.kibana.image.resources | nindent 10 }}

        volumeMounts:
        {{- if .Values.kibana.plugins.enabled }}
        - name: {{ include "kibana.pvcName" . }}
          mountPath: /usr/share/kibana/plugins
        {{- end }}
        # - name: {{ include "kibana.configMapName" . }}
        #   mountPath: /usr/share/kibana/plugins/logtrail/logtrail.json
        #   subPath: logtrail.json

      volumes:
        - name: {{ template "kibana.configMapName" . }}
          configMap:
            name: {{ template "kibana.configMapName" . }}
        - name: {{ template "kibana.pvcName" . }}
          emptyDir: {}

  {{- if and .Values.kibana.plugins.enabled .Values.kibana.persistentVolume.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: {{ template "kibana.pvcName" . }}

    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: {{ .Values.kibana.persistentVolume.storage }}
  {{- end -}}
{{- end -}}
