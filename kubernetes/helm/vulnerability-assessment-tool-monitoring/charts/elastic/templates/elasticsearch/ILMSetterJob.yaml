{{- if .Values.elasticsearch.retention -}}
apiVersion: batch/v1
kind: Job

metadata:
  name: {{ template "elastic.name" . }}-ilm-setter
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "commonLabels" . | nindent 4 }}

spec:
  backoffLimit: 0
  parallelism: 1
  ttlSecondsAfterFinished: 60

  template:
    metadata:
      name: {{ template "elastic.name" . }}-ilm-setter
      labels:
        {{- include "commonLabels" . | nindent 8 }}

    spec:
      restartPolicy: Never
      containers:
      - name: {{ template "elastic.name" . }}-ilm-setter-pod
        image: appropriate/curl:3.1
        imagePullPolicy: "IfNotPresent"
        envFrom:
          - configMapRef:
              name: {{ include "elastic.configMapName" . }}
        resources:
          limits:
            cpu: "40m"
            memory: "32Mi"
        command:
        - sh
        - -c
        - |-
          #!/bin/sh
          CHART_NAME="{{ template "elastic.name" . }}"
          LOG_ORIGIN="ilm-level-setter.sh"
          {{- include "logFunctions" . | nindent 10 }}

          http () {
              local path="${1}"
              if [ -n "${ELASTIC_USERNAME}" ] && [ -n "${ELASTIC_PASSWORD}" ]; then
                BASIC_AUTH="-u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}"
              else
                BASIC_AUTH=''
              fi
              curl -XGET --write-out %{http_code} -s --output /dev/null -k --fail ${BASIC_AUTH} ${{ .Release.Name | upper }}_ELASTICSEARCH_SERVICE_HOST:9200${path}
          }
          status_code=$(http "/_cluster/health?{{ .Values.elasticsearch.clusterHealthCheckParams }}")
          attempts=0

          while [ $status_code -ne "200" ]; do
            status_code=$(http "/_cluster/health?{{ .Values.elasticsearch.clusterHealthCheckParams }}")
            attemps=$((attempts + 1))
            if [ $attempts -ge "15" ]; then
              _error "Ran out of attempts. Job cancelled."
              exit 127
            fi
            _error "Cluster is not ready. Sleeping for 10 seconds"
            sleep 10
          done

          _info "Cluster is up and ready, attempting to inject configurations"
          status_code=$(curl --write-out %{http_code} -s --output /dev/null -X GET "${{ .Release.Name | upper }}_ELASTICSEARCH_SERVICE_HOST:9200/_ilm/status" -H 'Content-Type: application/json')
          if [ $status_code -ne "200" ]; then
            _info "ILM is not currently running"
            exit 0
          fi

          status_code=$(curl --write-out %{http_code} -s --output /dev/null -X PUT "${{ .Release.Name | upper }}_ELASTICSEARCH_SERVICE_HOST:9200/_ilm/policy/datastream_policy?pretty" -H 'Content-Type: application/json' -d'
          {
            "policy": {
              "phases": {
                "hot": {
                  "actions": {
                    "rollover": {
                      "max_size": "{{ .Values.elasticsearch.retention.max_size }}",
                      "max_age": "{{ .Values.elasticsearch.retention.max_age }}"
                    }
                  }
                },
                "delete": {
                  "min_age": "{{ .Values.elasticsearch.retention.min_age }}",
                  "actions": {
                    "delete": {}
                  }
                }
              }
            }
          }
          ')

          if [ $status_code -eq "200" ]; then
            _info "ILM level is set"
            exit 0
          else
            _error "Error setting Index Lifecycle Management level"
            exit 127
          fi
{{- end -}}
