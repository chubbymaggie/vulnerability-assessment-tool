apiVersion: apps/v1
kind: StatefulSet

metadata:
  name: {{ include "elastic.statefulSetName" . }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "commonLabels" . | nindent 4 }}

spec:
  serviceName: {{ .Release.Name }}-elasticsearch-headless
  updateStrategy:
    type: {{ .Values.elasticsearch.updateStrategy }}
  podManagementPolicy: {{ .Values.elasticsearch.podManagementPolicy }}
  replicas: {{ default .Values.elasticsearch.replicas }}

  selector:
    matchLabels:
      {{- include "elastic.enrichedLabels" . | nindent 6 }}

  volumeClaimTemplates:
  - metadata:
      name: {{ include "elastic.pvcName" . }}
      labels:
        {{- include "elastic.enrichedLabels" . | nindent 8 }}

    spec:
      {{- toYaml .Values.elasticsearch.volumeClaimTemplate | nindent 6 }}

  template:
    metadata:
      name: {{ include "elastic.podName" . }}
      labels:
        {{- include "elastic.enrichedLabels" . | nindent 8 }}

      annotations:
        checksum/elasticsearch-config: {{ include (print .Template.BasePath "/elasticsearch/configMap.yaml") . | sha256sum | trunc 63 }}

    spec:
      automountServiceAccountToken: false
      {{- if .Values.elasticsearch.image.mainContainer.securityContext }}
      securityContext:
        fsGroup: {{ .Values.elasticsearch.image.mainContainer.securityContext.runAsUser }}
      {{- end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: {{ .Values.elasticsearch.selfAntiAffinity }}
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values: [{{ include "elastic.podName" . | quote }}]

      terminationGracePeriodSeconds: {{ .Values.elasticsearch.terminationGracePeriodSeconds }}

      volumes:
        - name: esconfig
          configMap:
            name: {{ include "elastic.configMapName" . }}

      initContainers:
      - name: {{ include "elastic.name" . }}-init-container
        image: {{ include "containerName" .Values.elasticsearch.image.initContainer }}
        imagePullPolicy: "{{ .Values.elasticsearch.image.initContainer.pullPolicy }}"
        command: ["sysctl", "-w", "vm.max_map_count={{ .Values.elasticsearch.sysctlVmMaxMapCount}}"]
        resources:
          {{- toYaml .Values.elasticsearch.image.initContainer.resources | nindent 10 }}

        securityContext:
          {{- toYaml .Values.elasticsearch.image.initContainer.securityContext | nindent 10 }}

      containers:
      - name: {{ include "elastic.name" . }}-container
        image: {{ include "containerName" .Values.elasticsearch.image.mainContainer }}
        imagePullPolicy: "{{ .Values.elasticsearch.image.mainContainer.pullPolicy }}"
        securityContext:
          {{- toYaml .Values.elasticsearch.image.mainContainer.securityContext | nindent 10 }}
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300

        resources:
          {{- toYaml .Values.elasticsearch.image.mainContainer.resources | nindent 10 }}

        envFrom:
          - configMapRef:
              name: {{ include "elastic.configMapName" . }}
        env:
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name

        readinessProbe:
          {{- toYaml .Values.elasticsearch.image.mainContainer.readinessProbe | nindent 10 }}
          exec:
            command:
              - sh
              - -c
              - |
                #!/usr/bin/env bash -e
                START_FILE=/tmp/.es_start_file

                http () {
                    local path="${1}"
                    if [ -n "${ELASTIC_USERNAME}" ] && [ -n "${ELASTIC_PASSWORD}" ]; then
                      BASIC_AUTH="-u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}"
                    else
                      BASIC_AUTH=''
                    fi
                    curl -XGET -s -k --fail ${BASIC_AUTH} http://127.0.0.1:9200${path}
                }

                if [ -f "${START_FILE}" ]; then
                    echo 'Elasticsearch is already running, lets check the node is healthy'
                    http "/"
                else
                    echo 'Waiting for elasticsearch cluster to become cluster to be ready (request params: "{{ .Values.elasticsearch.clusterHealthCheckParams }}" )'
                    if http "/_cluster/health?{{ .Values.elasticsearch.clusterHealthCheckParams }}" ; then
                        touch ${START_FILE}
                        exit 0
                    else
                        echo 'Cluster is not yet ready (request params: "{{ .Values.elasticsearch.clusterHealthCheckParams }}" )'
                        exit 1
                    fi
                fi

        volumeMounts:
          - name: {{ include "elastic.pvcName" . | quote }}
            mountPath: /usr/share/elasticsearch/data

      {{- if eq .Values.elasticsearch.roles.master "true" }}
        # This sidecar will prevent slow master re-election
        # https://github.com/elastic/helm-charts/issues/63
      - name: {{ include "elastic.name" . }}-master-graceful-termination-handler
        image: {{ include "containerName" .Values.elasticsearch.image.sidecarContainer }}
        imagePullPolicy: {{ .Values.elasticsearch.image.sidecarContainer.pullPolicy }}
        command:
        - "sh"
        - -c
        - |
          #!/usr/bin/env bash
          set -eo pipefail
          http () {
              local path="${1}"
              if [ -n "${ELASTIC_USERNAME}" ] && [ -n "${ELASTIC_PASSWORD}" ]; then
                BASIC_AUTH="-u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}"
              else
                BASIC_AUTH=''
              fi
              curl -XGET -s -k --fail ${BASIC_AUTH} TCP://{{ .Release.Name }}-elasticsearch:9200${path}
          }

          cleanup () {
            while true ; do
              local master="$(http "/_cat/master?h=node" || echo "")"
              if [[ $master == "{{ .Release.Name }}-elasticsearch"* && $master != "${NODE_NAME}" ]]; then
                echo "This node is not master."
                break
              fi
              echo "This node is still master, waiting gracefully for it to step down"
              sleep 1
            done
            exit 0
          }

          trap cleanup SIGTERM

          sleep infinity &
          wait $!

        env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name

        resources:
          {{- toYaml .Values.elasticsearch.image.sidecarContainer.resources | nindent 10 }}
        {{- end -}}
