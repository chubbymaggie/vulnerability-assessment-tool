apiVersion: apps/v1
kind: StatefulSet

metadata:
  name: {{ template "statefulSetName" . }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "commonLabels" . | nindent 4 }}

spec:
  serviceName: {{ .Release.Name }}-grafana-headless
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      {{- include "grafana.enrichedLabels" . | nindent 6 }}

  updateStrategy:
    type: RollingUpdate

  template:
    metadata:
      labels:
        {{- include "grafana.enrichedLabels" . | nindent 8 }}
      annotations:
        checksum/grafana-config: {{ include (print $.Template.BasePath "/configMap.yaml") . | sha256sum }}
        checksum/grafana-secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}

    spec:
      serviceAccountName: {{ template "grafana.serviceAccountName" . }}

      {{- if .Values.persistentVolume.enabled }}
      initContainers:
        - name: {{ template "name" . }}-init-container
          image: {{ template "containerName" .Values.image.initContainer }}
          imagePullPolicy: {{ .Values.image.initContainer.pullpolicy }}
          command:
          - sh
          - -c
          - |
            #!/bin/sh
            {{- if .Values.image.securityContext.runAsUser }}
            chown -R  {{ .Values.image.securityContext.runAsUser }}:{{ .Values.image.securityContext.runAsUser }} /var/lib/grafana
            {{- end }}
            if [ ! -w /var/lib/grafana ]; then
              exit 127
            fi

            exit 0

          {{- if .Values.image.initContainer.resources }}
          resources:
            {{- toYaml .Values.image.initContainer.resources | nindent 12 }}
          {{- end }}

          securityContext:
            runAsUser: 0

          volumeMounts:
            - name: {{ template "pvcName" . }}
              mountPath: /var/lib/grafana
      {{- end }}

      containers:
        - name: {{ template "name" . }}-container
          image: {{ template "containerName" .Values.image.mainContainer }}
          imagePullPolicy: {{ .Values.image.mainContainer.pullpolicy }}

          volumeMounts:
            - name: {{ template "configMapName" . }}
              mountPath: /etc/grafana/provisioning/datasources/datasource.yaml
              subPath: datasource.yaml
            - name: {{ template "configMapName" . }}-dashboard
              mountPath: /etc/grafana/provisioning/dashboards/kubernetes.yaml
              subPath: kubernetes.yaml
            - name: {{ template "configMapName" . }}-dashboard
              mountPath: /var/lib/grafana/dashboards/kubernetes.json
              subPath: kubernetes.json
            - name: {{ template "configMapName" . }}-dashboard
              mountPath: /var/lib/grafana/dashboards/postgresql.json
              subPath: postgresql.json
            {{- if .Values.persistentVolume.enabled }}
            - name: {{ template "pvcName" . }}
              mountPath: /var/lib/grafana
            {{- end }}

          {{- if .Values.image.securityContext }}
          securityContext:
            {{- toYaml .Values.image.securityContext | nindent 12 }}
          {{- end }}

          ports:
            - name: http
              containerPort: 3000
              protocol: TCP

          envFrom:
            - configMapRef:
                name: {{ template "configMapName" . }}
            - secretRef:
                name: {{ template "secretName" . }}

          {{- if .Values.image.mainContainer.livenessProbe.enabled }}
          {{- with .Values.image.mainContainer.livenessProbe }}
          livenessProbe:
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            failureThreshold: {{ .failureThreshold }}
            successThreshold: {{ .successThreshold }}
            httpGet:
              path: /api/health
              port: 3000
          {{- end }}
          {{- end }}
          {{- if .Values.image.mainContainer.readinessProbe.enabled }}
          {{- with .Values.image.mainContainer.readinessProbe }}
          readinessProbe:
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            failureThreshold: {{ .failureThreshold }}
            successThreshold: {{ .successThreshold }}
            httpGet:
              path:  /api/health
              port: 3000
          {{- end }}
          {{- end }}

          {{- if .Values.image.mainContainer.resources }}
          resources:
            {{- toYaml .Values.image.mainContainer.resources | nindent 12 }}
          {{- end }}

      volumes:
        - name: {{ template "configMapName" . }}
          configMap:
            name: {{ template "configMapName" . }}
        - name: {{ template "configMapName" . }}-dashboard
          configMap:
            name: {{ template "configMapName" . }}-dashboard
        - name: {{ template "pvcName" . }}
          {{- if .Values.persistentVolume.enabled }}
          persistentVolumeClaim:
            claimName: {{ template "pvcName" . }}

  volumeClaimTemplates:
    - metadata:
        name: {{ template "pvcName" . }}
        namespace: {{ .Values.global.namespace }}

      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "{{ .Values.persistentVolume.storage }}"
          {{- else }}
          emptyDir: {}
          {{- end -}}
