apiVersion: apps/v1
kind: StatefulSet

metadata:
  name: {{ template "statefulSetName" . }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "commonLabels" . | nindent 4 }}

spec:
  replicas: {{ .Values.server.replicas }}
  serviceName: {{ .Release.Name }}-prometheus-headless
  podManagementPolicy: {{ .Values.server.podManagementPolicy }}

  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ template "podName" . }}
      {{- include "prom.server.enrichedLabels" . | nindent 6 }}

  template:
    metadata:
      labels:
        app.kubernetes.io/instance: {{ template "podName" . }}
        {{- include "prom.server.enrichedLabels" . | nindent 8 }}
      annotations:
        checksum/prometheus-config: {{ include (print .Template.BasePath "/prom-server/configMap.yaml") . | sha256sum | trunc 63 }}        

    spec:
      serviceAccountName: {{ template "prom.server.serviceAccountName" . }}

      containers:
        - name: {{ template "name" . }}-server-container
          image: {{ template "containerName" .Values.server.image.mainContainer }}
          imagePullPolicy: {{ .Values.server.image.mainContainer.pullPolicy }}
          args:
          - --config.file=/etc/config/prometheus.yml
          - --web.external-url=http://localhost:9090{{ .Values.global.subPath }}/monitoring/prometheus
          - --web.console.libraries=/etc/prometheus/console_libraries
          - --web.console.templates=/etc/prometheus/consoles
          - --web.enable-lifecycle
          {{- if .Values.server.enableAdminApi }}
          - --web.enable-admin-api
          {{- end }}
          {{- if .Values.server.retention }}
          - --storage.tsdb.retention.time={{ .Values.server.retention }}
          {{- end }}
          # {{- if .Values.server.persistentVolume.enabled }}
          # - --storage.tsdb.path={{ .Values.server.persistentVolume.mountPath }}
          # {{- end }}
          ports:
            - name: prom
              containerPort: 9090
          {{- if .Values.server.image.mainContainer.livenessProbe.enabled }}
          {{- with .Values.server.image.mainContainer.livenessProbe }}
          livenessProbe:
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            failureThreshold: {{ .failureThreshold }}
            httpGet:
              path: /healthz
              port: prom
          {{- end }}
          {{- end }}
          {{ if .Values.kubeStateMetrics.image.readinessProbe.enabled }}
          {{- with .Values.kubeStateMetrics.image.readinessProbe }}
          readinessProbe:
            initialDelaySeconds: {{ .initialDelaySeconds }}
            periodSeconds: {{ .periodSeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            failureThreshold: {{ .failureThreshold }}
            httpGet:
              path: /healthz
              port: prom
          {{- end }}
          {{- end }}
          {{- if .Values.server.image.mainContainer.resources -}}
          resources:
            {{- toYaml .Values.server.image.mainContainer.resources | nindent 12 }}
          {{- end }}
          {{- if .Values.server.image.mainContainer.securityContext }}
          securityContext:
            {{- toYaml .Values.server.image.mainContainer.securityContext | nindent 12 }}
          {{- end }}

          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
          {{- if .Values.server.persistentVolume.enabled }}
            - name: {{ template "pvcName" . }}
              mountPath: {{ .Values.server.persistentVolume.mountPath }}
          {{- end }}

      volumes:
        - name: config-volume
          configMap:
            name: {{ template "configMapName" . }}
        {{- if .Values.server.persistentVolume.enabled }}
        - name: {{ template "pvcName" . }}
          persistentVolumeClaim:
            claimName: {{ template "pvcName" . }}
        {{- end }}

  {{- if .Values.server.persistentVolume.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: {{ template "pvcName" . }}

      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "{{ .Values.server.persistentVolume.storage }}"
  {{- end }}
