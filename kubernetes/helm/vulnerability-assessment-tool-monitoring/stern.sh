#!/bin/bash
if [ -z $VULNERABILITY_ASSESSMENT_TOOL_CORE_NAMESPACE ]; then
  VULNERABILITY_ASSESSMENT_TOOL_CORE_NAMESPACE="vulnerability-assessment-tool-core"
fi

if [ -z $VULNERABILITY_ASSESSMENT_TOOL_ADMIN_NAMESPACE ]; then
  VULNERABILITY_ASSESSMENT_TOOL_ADMIN_NAMESPACE="vulnerability-assessment-tool-admin"
fi

if [ -z $VULNERABILITY_ASSESSMENT_TOOL_MONITORING_NAMESPACE ]; then
  VULNERABILITY_ASSESSMENT_TOOL_MONITORING_NAMESPACE="vulnerability-assessment-tool-monitoring"
fi

if [ -z $TAIL_LENGTH ]; then
  TAIL_LENGTH=15
fi

_stern_log() {
  echo `date "+%Y:%m:%d-%H:%M:%S"` "$1" "\033[0m: $2"
}

_stern_info() {
  if [[ -z $STERN_DEBUG ]]; then
    _stern_log "[info]" "$1"
  fi
}
_stern_warn() {
  _stern_log "\e[1;33m[warning]" "$1"
}
_stern_error() {
  _stern_log "\e[1;31m[error]" "$1"
}
_stern_success() {
  _stern_log "\e[1;32m[success]" "$1"
}

check_prerequisites() {
  STERN_PATH=`command -v stern`
  if [ -n "$STERN_PATH" ]; then
    _stern_success "stern installation has been found in $STERN_PATH"
    export STERN_PATH=$STERN_PATH
  else
    _stern_error "stern has not been found"
  fi
}

query_constructor() {
  QUERY_STRING="stern $1 \
  --namespace $2 "
  if [[ -n "$CONTAINER" ]]; then
    QUERY_STRING+="--container $CONTAINER "
  fi
  if [[ $SINGLE -eq "0" ]]; then
    QUERY_STRING+="--template '{{ color .PodColor .PodName }} {{ .Message }}' "
  else
    QUERY_STRING+="--template '{{ .Message }}' "
  fi

  if [[ -n "$TAIL_LENGTH" ]]; then
    QUERY_STRING+="--tail $TAIL_LENGTH "
  fi
  if [[ -n "$TAIL_SINCE" ]]; then
    QUERY_STRING+=" --since $TAIL_SINCE "
  fi
  echo $QUERY_STRING
}

query_constructor_core() {
  query_constructor $1 $VULNERABILITY_ASSESSMENT_TOOL_CORE_NAMESPACE
}
query_constructor_admin() {
  query_constructor $1 $VULNERABILITY_ASSESSMENT_TOOL_ADMIN_NAMESPACE
}
query_constructor_monitoring(){
  query_constructor $1 $VULNERABILITY_ASSESSMENT_TOOL_MONITORING_NAMESPACE
}


restbackend() {
  SINGLE="1"
  POD_QUERY="restbackend-stateful-set-$1"
  CONTAINER=""
  if [[ -z "$1" ]]; then
    SINGLE="0"
    POD_QUERY="restbackend-stateful-set"
  fi
  eval `query_constructor_core $POD_QUERY`
}

restlibutils() {
  SINGLE="0"
  POD_QUERY="restlibutils-deployment"
  CONTAINER=""
  eval `query_constructor_core $POD_QUERY`
}

frontendapps() {
  SINGLE="0"
  POD_QUERY="frontendapps-deployment"
  CONTAINER=""
  eval `query_constructor_core $POD_QUERY`
}

frontendbugs() {
  SINGLE="0"
  POD_QUERY="frontendbugs-deployment"
  CONTAINER=""
  eval `query_constructor_core $POD_QUERY`
}

postgres_master() {
  SINGLE="1"
  POD_QUERY="postgres-master-$1"
  CONTAINER="postgres-master-container"
  if [[ -z "$1" ]]; then
    POD_QUERY="postgres-master-0"
  fi
  eval `query_constructor_core $POD_QUERY`
}

postgres_slave() {
  SINGLE="1"
  POD_QUERY="postgres-slave-$1"
  CONTAINER="postgres-slave-container"
  if [[ -z "$1" ]]; then
    SINGLE="0"
    POD_QUERY="postgres-slave"
  fi
  eval `query_constructor_core $POD_QUERY`
}

patchlibanalyzer() {
  SINGLE="1"
  POD_QUERY="patchlibanalyzer-deployment"
  CONTAINER=""
  eval `query_constructor_core $POD_QUERY`
}

nginx() {
  SINGLE="0"
  POD_QUERY="nginx-ingress-controller"
  CONTAINER=""
  eval `query_constructor_admin $POD_QUERY`
}


eval "$1"
