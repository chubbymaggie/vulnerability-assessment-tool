apiVersion: apps/v1
kind: Deployment

metadata:
  name: {{ template "nginx-ingress.ingressController.deploymentName" . }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "nginx-ingress.ingressController.enrichedLabels" . | nindent 4 }}

spec:
  replicas: {{ .Values.ingressController.replicas }}
  revisionHistoryLimit: 5
  minReadySeconds: 0
  strategy:
    {{- toYaml .Values.ingressController.updateStrategy | nindent 4 }}

  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ template "nginx-ingress.ingressController.podName" . }}
      {{- include "nginx-ingress.ingressController.enrichedLabels" .  | nindent 6 }}

  template:
    metadata:
      labels:
        app.kubernetes.io/instance: {{ template "nginx-ingress.ingressController.podName" . }}
        {{- include "nginx-ingress.ingressController.enrichedLabels" . | nindent 8 }}
      {{- if .Values.metrics.enabled }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "10254"
      {{- end }}
    spec:
      dnsPolicy: ClusterFirst
      hostNetwork: false

      serviceAccountName: {{ template "serviceAccountName" . }}
      terminationGracePeriodSeconds: 10

      containers:
        - name: {{ template "nginx-ingress.ingressController.name" . }}-container
          image: {{ template "containerName" .Values.ingressController.image }}
          imagePullPolicy: {{ .Values.ingressController.image.pullPolicy }}
          args:
            - /nginx-ingress-controller
            - --default-backend-service={{ if .Values.defaultBackend.enabled }}{{ .Values.global.coreNamespace }}/{{ template "nginx-ingress.defaultBackend.serviceName" . }}{{ else }}{{ printf " " }}{{ end }}
            - --publish-service={{ .Values.global.namespace }}/{{ if .Values.ingressController.external }}{{ template "nginx-ingress.ingressController.serviceName" . }}{{ else }}{{ printf "" }}{{ end }}
            - --election-id={{ .Values.ingressController.electionID }}
            - --ingress-class={{ .Values.ingressController.ingressClass }}
            - --configmap={{ .Values.global.namespace }}/{{ template "configMapName" . }}
            {{- if .Values.ssl.enabled }}
            - --default-ssl-certificate={{ .Values.global.namespace }}/{{ template "nginx-ingress.tls.secretName" . }}
            - --enable-ssl-chain-completion=true
            {{- end }}
            - --metrics-per-host=true

          {{- if .Values.ingressController.persistentVolume }}
          {{- if .Values.ingressController.persistentVolume.nfs }}
          lifecycle:
            postStart:
              exec:
                command:
                - /bin/sh
                - -c
                - . /vulas/nginx-init.sh
          {{- end }}
          {{- end }}

          ports:
          {{- range $key, $value := .Values.global.ingressController.ports }}
            - name: {{ $key }}
              containerPort: {{ $value.targetPort }}
              protocol: {{ $value.protocol }}
          {{- end }}

          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace

          resources:
            {{- toYaml .Values.ingressController.image.resources | nindent 12 }}
          securityContext:
            capabilities:
                drop:
                - ALL
                add:
                - NET_BIND_SERVICE
            {{- if .Values.ingressController.image.runAsUser }}
            runAsUser: {{ .Values.ingressController.image.runAsUser }}
            {{- end }}
            {{- if .Values.ingressController.image.allowPrivilegeEscalation }}
            allowPrivilegeEscalation: {{ .Values.ingressController.image.allowPrivilegeEscalation }}
            {{- end }}
            readOnlyRootFilesystem: false
          {{- if and .Values.ingressController.livenessProbe .Values.ingressController.livenessProbe.enabled }}
          {{- with .Values.ingressController.livenessProbe }}
          livenessProbe:
            initialDelaySeconds: {{ .initialDelaySeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            failureThreshold: {{ .failureThreshold }}
            successThreshold: {{ .successThreshold }}
            tcpSocket:
              port: metrics
          {{- end }}
          {{- end }}
          {{- if and .Values.ingressController.readinessProbe .Values.ingressController.readinessProbe.enabled }}
          {{- with .Values.ingressController.readinessProbe }}
          readinessProbe:
            initialDelaySeconds: {{ .initialDelaySeconds }}
            timeoutSeconds: {{ .timeoutSeconds }}
            failureThreshold: {{ .failureThreshold }}
            successThreshold: {{ .successThreshold }}
            httpGet:
              path: {{ .path }}
              port: metrics
          {{- end }}
          {{- end }}

          volumeMounts:
          - name: {{ template "mountedConfigMapName" . }}
            mountPath: /vulas/nginx-init.sh
            subPath: nginx-init.sh
          {{- if .Values.ingressController.persistentVolume }}
          - name: {{ template "pvcName" . }}
            mountPath: {{ .Values.ingressController.persistentVolume.mountPath }}
          {{- end }}

      {{- if .Values.ingressController.selfAntiAffinity }}
      affinity:
        podAntiAffinity:
          {{- if .Values.ingressController.selfAntiAffinity.soft }}
          preferredDuringSchedulingIgnoredDuringExecution:
          {{- else }}
          requiredDuringSchedulingIgnoredDuringExecution:
          {{- end }}
          - weight: {{ .Values.ingressController.selfAntiAffinity.weight }}
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values: [{{ template "nginx-ingress.ingressController.podName" . }}]
              topologyKey: "kubernetes.io/hostname"
      {{- end }}

      volumes:
        - name: {{ template "mountedConfigMapName" . }}
          configMap:
            name: {{ template "mountedConfigMapName" .  }}
            defaultMode: 0755
    {{- if .Values.ingressController.persistentVolume }}
    {{- if .Values.ingressController.persistentVolume.nfs }}
        - name: {{ template "pvcName" . }}
          persistentVolumeClaim:
            claimName: {{ template "pvcName" . }}
    {{- else }}

  volumeClaimTemplates:
  - metadata:
      name: {{ template "pvcName" . }}
      labels:
        {{- include "nginx-ingress.ingressController.enrichedLabels" . | nindent 8 }}

    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: {{ .Values.ingressController.persistentVolume.storage }}
  {{- end -}}
  {{- end -}}
