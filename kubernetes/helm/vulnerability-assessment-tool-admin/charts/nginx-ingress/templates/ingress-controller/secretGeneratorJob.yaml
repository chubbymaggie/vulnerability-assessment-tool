{{- if .Values.ingressController.authIngress }}
{{- if .Values.ingressController.authIngress.enabled }}
apiVersion: batch/v1
kind: Job

metadata:
  name: {{ template "name" . }}-secret-generator
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "commonLabels" . | nindent 4 }}

spec:
  backoffLimit: 0
  parallelism: 1
  ttlSecondsAfterFinished: 60

  template:
    metadata:
      name: {{ template "name" . }}-secret-generator
      labels:
        {{- include "commonLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ template "serviceAccountName" . }}
      restartPolicy: Never
      containers:
      - name: {{ template "name" . }}-secret-generator-container
        image: alpine:3.10.2
        command:
          - sh
          - -c
          - |
            #!/bin/sh
            CHART_NAME="{{ template "name" . }}"
            LOG_ORIGIN="password-generator.sh"
            {{- include "logFunctions" . | nindent 12 }}

            _clean_up() {
              _info "Cleaning up"
              rm -f /root/.secrets.json || true
              if [ $n $1 ]; then
                exit $1
              fi

              exit 0
            }

            apk add --no-cache --quiet apache2-utils \
              curl \
              jq

            {{- $credentials := .Values.ingressController.authIngress.credentials }}
            _info "Generating password for auth ingress"
            NGINX_AUTH=$(htpasswd -nb {{ $credentials.user | default "vulas" }} {{ $credentials.password | default "changeme" }} | base64)
            KUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)

            echo "
            {
              \"apiVersion\": \"v1\",
              \"kind\": \"Secret\",
              \"metadata\": {
                \"name\": \"auth-secret\",
                \"namespace\": \"{{ .Values.global.namespace }}\",
                \"labels\": {
                  \"app.kubernetes.io/name\": \"{{ .Chart.Name }}\",
                  \"app.kubernetes.io/part-of\": \"{{ .Values.global.projectName }}\",
                  \"app.kubernetes.io/version\": \"{{ .Chart.AppVersion }}\",
                  \"app.kubernetes.io/managed-by\": \"{{ .Release.Service }}\",
                  \"{{ .Values.global.projectName }}/environment\": \"{{ .Values.global.env }}\",
                  \"{{ .Values.global.projectName }}/release-name\": \"{{ .Release.Name }}\"
                }
              },
              \"type\": \"Opaque\",
              \"data\": {
                \"auth\": \"$NGINX_AUTH\"
              }
            }
            " >> secrets.json

            RESULT=$(curl -sSk \
              -X POST \
              --data "@secrets.json" \
              -H "Authorization: Bearer $KUBE_TOKEN" \
              -H "Accept: application/json" \
              -H "Content-Type: application/json" \
              https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/{{ .Values.global.namespace }}/secrets
            )
            RETURN_CODE=$(echo $RESULT | jq '.code')
            if [ $RETURN_CODE -eq "200" ]; then
              _info "Secret has been generated"
            else
              REASON=$(echo $RESULT | jq -r '.reason')
              if [ $REASON = "AlreadyExists" ]; then
                _info "Secret already exists, updating"
                UPDATE_RESULT=$(curl -sSk \
                  -X PUT \
                  --data "@secrets.json" \
                  -H "Authorization: Bearer $KUBE_TOKEN" \
                  -H "Accept: application/json" \
                  -H "Content-Type: application/json" \
                  https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_PORT_443_TCP_PORT/api/v1/namespaces/{{ .Values.global.namespace }}/secrets/auth-secret
                )
                UPDATE_RETURN=$(echo $UPDATE_RESULT | jq '.data.auth | length > 0')
                if [ $UPDATE_RETURN ]; then
                  _info "Secret has been updated"
                  _clean_up 0
                else
                  _error "encountered error when updating secret"
                  _clean_up 127
                fi
              else
                _error "Unknown error encountered"
                _clean_up 127
              fi
            fi

            _clean_up 0

        resources:
          limits:
            memory: "32Mi"
            cpu: "40m"
{{- end -}}
{{- end -}}
