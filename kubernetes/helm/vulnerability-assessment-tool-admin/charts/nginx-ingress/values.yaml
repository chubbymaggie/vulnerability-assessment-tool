managedRelease: "alpha"

ssl:
  enabled: false

metrics:
  enabled: true

rbac:
  # This would create clusterrole and roles required for nginx ingress controller
  # to perform operations accross three namespaces used by this chart
  create: true

defaultBackend:
  enabled: true
  # Suggestion : ~= 1 (returns 404 so useless to duplicate)
  replicas: 2

  selfAntiAffinity: {}
    # soft: true
    # weight: 100

  podDisruptionBudget: {}

  image:
    pullPolicy: "IfNotPresent"
    registry: {}
    registryPort: {}
    name: "nginx"
    tag: "1.17.4-alpine"
    runAsUser: 101

    resources: {}
      # limits:
      #   memory: "60Mi"
      #   cpu: "110m"
      # requests:
      #   memory: "50Mi"
      #   cpu: "100m"

  livenessProbe:
    enabled: true
    initialDelaySeconds: 2
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    enabled: true
    initialDelaySeconds: 0
    periodSeconds: 5
    timeoutSeconds: 5
    failureThreshold: 6

ingressController:
  authIngress:
    # This enables basic auth access to (if present) kibana, frontendbugs, prometheus
    enabled: true
    credentials:
    # These credentials are generated and encrypted with htpasswd with a
    # poststart helm hook named "nginx-ingress-secret-generator" which
    # communicates with the kubernetes API to modify the corresponding secret
      user: vulas
      password: changeme

  # Suggestion : ~= Depending on load
  # (kubernetes/nginx-ingress controller has internal distribution
  # mechanisms such as elections so it can handle it)
  replicas: 3

  updateStrategy: {}

  # Possible values are listed in NGINX's error_log config documentation
  # (see http://nginx.org/en/docs/ngx_core_module.html#error_log)
  debugLevel: error

  external: true
  externalIP: {}

  electionID: ingress-controller-leader
  ingressClass: nginx

  # If rbac is set to {} no clusterrole, role and rolebinding
  # will be created to link up to the desired service account
  rbac: true

  selfAntiAffinity: {}
  # You can set selfAntiAffinity to {} in order to skip
  # all affinity declarations
    # soft: true
    # weight: 100

  podDisruptionBudget: {}
  persistentVolume: {}

  image:
    pullPolicy: "IfNotPresent"
    registry: "quay.io"
    registryPort: {}
    name: "kubernetes-ingress-controller/nginx-ingress-controller"
    tag: "0.25.0"
    runAsUser: {}
    allowPrivilegeEscalation: true

    resources: {}
      # limits:
      #   memory: "500Mi"
      #   cpu: "500m"
      # requests:
      #   memory: "50Mi"
      #   cpu: "50m"


  livenessProbe:
    # Worst case scenario time before container is considered unready by k8s :
    # initialDelaySeconds + ((periodSeconds + timeoutSeconds) * successThreshold)
    # = 165s ~= 3min
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 10
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 60
    timeoutSeconds: 5
    failureThreshold: 10
    successThreshold: 2
    path: /healthz
